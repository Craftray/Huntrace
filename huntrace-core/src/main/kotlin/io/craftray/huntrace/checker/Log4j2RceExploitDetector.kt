package io.craftray.huntrace.checker

import com.google.common.collect.ImmutableSet
import io.papermc.lib.PaperLib
import org.apache.commons.codec.digest.DigestUtils
import java.io.File

object Log4j2RceExploitDetector {

    @Suppress("SpellCheckingInspection")
    private val SAFE_MD5_17_111 = ImmutableSet.of("5498f1af099f2bc44a99ebe060183bd5")

    @Suppress("SpellCheckingInspection")
    private val SAFE_MD5_112_AND_ABOVE = ImmutableSet.of("becbbb4de436ab8545157c644296c5c3")

    val log4j2Version by lazy {
        val pkg = Class.forName("org.apache.logging.log4j.core.Version").`package`
        kotlin.runCatching { pkg.specificationVersion }.getOrNull()
    }

    private val log4j2MiddleVersion by lazy {
        kotlin.runCatching { log4j2Version!!.split(".")[1].toInt() }.getOrDefault(-1)
    }

    val isJvmFlagAvailable = log4j2MiddleVersion > 10

    internal fun detect() = when {
        log4j2MiddleVersion >= 15 && !log4j2Version!!.contains("RC1", true) -> false
        !detectClassLoaded() -> false
        !detectDefaultConfig() -> false
        !detectNonEnvironmentVariable() -> false
        isJvmFlagAvailable && !detectNonJvmFlag() -> false
        else -> true
    }

    private fun detectClassLoaded() =
        kotlin.runCatching { Class.forName("org.apache.logging.log4j.core.lookup.JndiLookup") }.isSuccess

    @Suppress("ReturnCount")
    private fun detectDefaultConfig(): Boolean {
        val fileName = kotlin.runCatching { System.getProperty("log4j.configurationFile") }.getOrNull() ?: return false
        val file = kotlin.runCatching { File(System.getProperty("user.dir"), fileName) }.getOrNull() ?: return false
        if (!file.exists()) return false
        val md5 = file.inputStream().use { DigestUtils.md5Hex(it) }
        if (PaperLib.isVersion(12) && md5 in SAFE_MD5_112_AND_ABOVE) return false
        if (PaperLib.isVersion(7) && md5 in SAFE_MD5_17_111) return false
        return true
    }

    private fun detectNonEnvironmentVariable() =
        System.getenv()["LOG4J_FORMAT_MSG_NO_LOOKUPS"].toBoolean()

    private fun detectNonJvmFlag() =
        kotlin.runCatching { System.getProperty("log4j2.formatMsgNoLookups").toBoolean() }
            .getOrDefault(false)
}
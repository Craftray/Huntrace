package io.craftray.huntrace.checker

object Log4j2RceExploitDetector {

    val log4j2Version by lazy {
        val pkg = Class.forName("org.apache.logging.log4j.core.Version").`package`
        kotlin.runCatching { pkg.specificationVersion }.getOrNull()
    }

    private val log4j2MiddleVersion by lazy {
        kotlin.runCatching { log4j2Version!!.split(".")[1].toInt() }.getOrDefault(-1)
    }

    val isJvmFlagAvailable = log4j2MiddleVersion > 10

    internal fun detect() = when {
        log4j2MiddleVersion >= 15 && !log4j2Version!!.contains("RC1", true) -> false
        !detectClassLoaded() -> false
        // !detectDefaultConfig() -> false
        !detectNonEnvironmentVariable() -> false
        isJvmFlagAvailable && !detectNonJvmFlag() -> false
        else -> true
    }

    private fun detectClassLoaded() =
        kotlin.runCatching { Class.forName("org.apache.logging.log4j.core.lookup.JndiLookup") }.isSuccess

//    private fun detectDefaultConfig(): Boolean {
//        TODO
//    }

    private fun detectNonEnvironmentVariable() =
        System.getenv()["LOG4J_FORMAT_MSG_NO_LOOKUPS"].toBoolean()

    private fun detectNonJvmFlag() =
        kotlin.runCatching { System.getProperty("log4j2.formatMsgNoLookups").toBoolean() }
            .getOrDefault(false)
}